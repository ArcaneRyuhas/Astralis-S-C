//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Astralis.UserManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DataAccessProject.Contracts")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserWithTeam", Namespace="http://schemas.datacontract.org/2004/07/DataAccessProject.Contracts")]
    [System.SerializableAttribute()]
    public partial class UserWithTeam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Team {
            get {
                return this.TeamField;
            }
            set {
                if ((this.TeamField.Equals(value) != true)) {
                    this.TeamField = value;
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamesWonInfo", Namespace="http://schemas.datacontract.org/2004/07/DataAccessProject.Contracts")]
    [System.SerializableAttribute()]
    public partial class GamesWonInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesWonCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesWonCount {
            get {
                return this.GamesWonCountField;
            }
            set {
                if ((this.GamesWonCountField.Equals(value) != true)) {
                    this.GamesWonCountField = value;
                    this.RaisePropertyChanged("GamesWonCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManager.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        int AddUser(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddGuestUser", ReplyAction="http://tempuri.org/IUserManager/AddGuestUserResponse")]
        Astralis.UserManager.User AddGuestUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddGuestUser", ReplyAction="http://tempuri.org/IUserManager/AddGuestUserResponse")]
        System.Threading.Tasks.Task<Astralis.UserManager.User> AddGuestUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ConfirmUserCredentials", ReplyAction="http://tempuri.org/IUserManager/ConfirmUserCredentialsResponse")]
        int ConfirmUserCredentials(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ConfirmUserCredentials", ReplyAction="http://tempuri.org/IUserManager/ConfirmUserCredentialsResponse")]
        System.Threading.Tasks.Task<int> ConfirmUserCredentialsAsync(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/FindUserByNickname", ReplyAction="http://tempuri.org/IUserManager/FindUserByNicknameResponse")]
        int FindUserByNickname(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/FindUserByNickname", ReplyAction="http://tempuri.org/IUserManager/FindUserByNicknameResponse")]
        System.Threading.Tasks.Task<int> FindUserByNicknameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserByNickname", ReplyAction="http://tempuri.org/IUserManager/GetUserByNicknameResponse")]
        Astralis.UserManager.User GetUserByNickname(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserByNickname", ReplyAction="http://tempuri.org/IUserManager/GetUserByNicknameResponse")]
        System.Threading.Tasks.Task<Astralis.UserManager.User> GetUserByNicknameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateUser", ReplyAction="http://tempuri.org/IUserManager/UpdateUserResponse")]
        int UpdateUser(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateUser", ReplyAction="http://tempuri.org/IUserManager/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsUserOnline", ReplyAction="http://tempuri.org/IUserManager/IsUserOnlineResponse")]
        bool IsUserOnline(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/IsUserOnline", ReplyAction="http://tempuri.org/IUserManager/IsUserOnlineResponse")]
        System.Threading.Tasks.Task<bool> IsUserOnlineAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : Astralis.UserManager.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<Astralis.UserManager.IUserManager>, Astralis.UserManager.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(Astralis.UserManager.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(Astralis.UserManager.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public Astralis.UserManager.User AddGuestUser() {
            return base.Channel.AddGuestUser();
        }
        
        public System.Threading.Tasks.Task<Astralis.UserManager.User> AddGuestUserAsync() {
            return base.Channel.AddGuestUserAsync();
        }
        
        public int ConfirmUserCredentials(string nickname, string password) {
            return base.Channel.ConfirmUserCredentials(nickname, password);
        }
        
        public System.Threading.Tasks.Task<int> ConfirmUserCredentialsAsync(string nickname, string password) {
            return base.Channel.ConfirmUserCredentialsAsync(nickname, password);
        }
        
        public int FindUserByNickname(string nickname) {
            return base.Channel.FindUserByNickname(nickname);
        }
        
        public System.Threading.Tasks.Task<int> FindUserByNicknameAsync(string nickname) {
            return base.Channel.FindUserByNicknameAsync(nickname);
        }
        
        public Astralis.UserManager.User GetUserByNickname(string nickname) {
            return base.Channel.GetUserByNickname(nickname);
        }
        
        public System.Threading.Tasks.Task<Astralis.UserManager.User> GetUserByNicknameAsync(string nickname) {
            return base.Channel.GetUserByNicknameAsync(nickname);
        }
        
        public int UpdateUser(Astralis.UserManager.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(Astralis.UserManager.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool IsUserOnline(string nickname) {
            return base.Channel.IsUserOnline(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserOnlineAsync(string nickname) {
            return base.Channel.IsUserOnlineAsync(nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManager.ILobbyManager", CallbackContract=typeof(Astralis.UserManager.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageManager/SendMessage")]
        void SendMessage(string message, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageManager/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/CreateLobbyResponse")]
        string CreateLobby(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/CreateLobbyResponse")]
        System.Threading.Tasks.Task<string> CreateLobbyAsync(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CanAccessToLobby", ReplyAction="http://tempuri.org/ILobbyManager/CanAccessToLobbyResponse")]
        int CanAccessToLobby(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CanAccessToLobby", ReplyAction="http://tempuri.org/ILobbyManager/CanAccessToLobbyResponse")]
        System.Threading.Tasks.Task<int> CanAccessToLobbyAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LobbyExist", ReplyAction="http://tempuri.org/ILobbyManager/LobbyExistResponse")]
        bool LobbyExist(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LobbyExist", ReplyAction="http://tempuri.org/ILobbyManager/LobbyExistResponse")]
        System.Threading.Tasks.Task<bool> LobbyExistAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LobbyIsNotFull", ReplyAction="http://tempuri.org/ILobbyManager/LobbyIsNotFullResponse")]
        bool LobbyIsNotFull(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LobbyIsNotFull", ReplyAction="http://tempuri.org/ILobbyManager/LobbyIsNotFullResponse")]
        System.Threading.Tasks.Task<bool> LobbyIsNotFullAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/SendInvitationToLobby", ReplyAction="http://tempuri.org/ILobbyManager/SendInvitationToLobbyResponse")]
        string SendInvitationToLobby(string gameId, string userToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/SendInvitationToLobby", ReplyAction="http://tempuri.org/ILobbyManager/SendInvitationToLobbyResponse")]
        System.Threading.Tasks.Task<string> SendInvitationToLobbyAsync(string gameId, string userToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ConnectToLobby")]
        void ConnectToLobby(Astralis.UserManager.User user, string gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ConnectToLobby")]
        System.Threading.Tasks.Task ConnectToLobbyAsync(Astralis.UserManager.User user, string gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/DisconnectFromLobby")]
        void DisconnectFromLobby(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/DisconnectFromLobby")]
        System.Threading.Tasks.Task DisconnectFromLobbyAsync(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ChangeLobbyUserTeam")]
        void ChangeLobbyUserTeam(string userNickname, int team);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ChangeLobbyUserTeam")]
        System.Threading.Tasks.Task ChangeLobbyUserTeamAsync(string userNickname, int team);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendUsersFromLobbyToGame")]
        void SendUsersFromLobbyToGame(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendUsersFromLobbyToGame")]
        System.Threading.Tasks.Task SendUsersFromLobbyToGameAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/KickUserFromLobby")]
        void KickUserFromLobby(string userNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/KickUserFromLobby")]
        System.Threading.Tasks.Task KickUserFromLobbyAsync(string userNickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageManager/ReceiveMessage", ReplyAction="http://tempuri.org/IMessageManager/ReceiveMessageResponse")]
        void ReceiveMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ShowConnectionInLobby", ReplyAction="http://tempuri.org/ILobbyManager/ShowConnectionInLobbyResponse")]
        void ShowConnectionInLobby(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ShowUsersInLobby", ReplyAction="http://tempuri.org/ILobbyManager/ShowUsersInLobbyResponse")]
        void ShowUsersInLobby(System.Tuple<Astralis.UserManager.User, int>[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ShowDisconnectionInLobby", ReplyAction="http://tempuri.org/ILobbyManager/ShowDisconnectionInLobbyResponse")]
        void ShowDisconnectionInLobby(Astralis.UserManager.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/UpdateLobbyUserTeam", ReplyAction="http://tempuri.org/ILobbyManager/UpdateLobbyUserTeamResponse")]
        void UpdateLobbyUserTeam(string userNickname, int team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/SendUserFromLobbyToGame", ReplyAction="http://tempuri.org/ILobbyManager/SendUserFromLobbyToGameResponse")]
        void SendUserFromLobbyToGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/GetKickedFromLobby", ReplyAction="http://tempuri.org/ILobbyManager/GetKickedFromLobbyResponse")]
        void GetKickedFromLobby();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : Astralis.UserManager.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<Astralis.UserManager.ILobbyManager>, Astralis.UserManager.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string message, string nickname) {
            base.Channel.SendMessage(message, nickname);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string nickname) {
            return base.Channel.SendMessageAsync(message, nickname);
        }
        
        public string CreateLobby(Astralis.UserManager.User user) {
            return base.Channel.CreateLobby(user);
        }
        
        public System.Threading.Tasks.Task<string> CreateLobbyAsync(Astralis.UserManager.User user) {
            return base.Channel.CreateLobbyAsync(user);
        }
        
        public int CanAccessToLobby(string nickname) {
            return base.Channel.CanAccessToLobby(nickname);
        }
        
        public System.Threading.Tasks.Task<int> CanAccessToLobbyAsync(string nickname) {
            return base.Channel.CanAccessToLobbyAsync(nickname);
        }
        
        public bool LobbyExist(string gameId) {
            return base.Channel.LobbyExist(gameId);
        }
        
        public System.Threading.Tasks.Task<bool> LobbyExistAsync(string gameId) {
            return base.Channel.LobbyExistAsync(gameId);
        }
        
        public bool LobbyIsNotFull(string gameId) {
            return base.Channel.LobbyIsNotFull(gameId);
        }
        
        public System.Threading.Tasks.Task<bool> LobbyIsNotFullAsync(string gameId) {
            return base.Channel.LobbyIsNotFullAsync(gameId);
        }
        
        public string SendInvitationToLobby(string gameId, string userToSend) {
            return base.Channel.SendInvitationToLobby(gameId, userToSend);
        }
        
        public System.Threading.Tasks.Task<string> SendInvitationToLobbyAsync(string gameId, string userToSend) {
            return base.Channel.SendInvitationToLobbyAsync(gameId, userToSend);
        }
        
        public void ConnectToLobby(Astralis.UserManager.User user, string gameId) {
            base.Channel.ConnectToLobby(user, gameId);
        }
        
        public System.Threading.Tasks.Task ConnectToLobbyAsync(Astralis.UserManager.User user, string gameId) {
            return base.Channel.ConnectToLobbyAsync(user, gameId);
        }
        
        public void DisconnectFromLobby(Astralis.UserManager.User user) {
            base.Channel.DisconnectFromLobby(user);
        }
        
        public System.Threading.Tasks.Task DisconnectFromLobbyAsync(Astralis.UserManager.User user) {
            return base.Channel.DisconnectFromLobbyAsync(user);
        }
        
        public void ChangeLobbyUserTeam(string userNickname, int team) {
            base.Channel.ChangeLobbyUserTeam(userNickname, team);
        }
        
        public System.Threading.Tasks.Task ChangeLobbyUserTeamAsync(string userNickname, int team) {
            return base.Channel.ChangeLobbyUserTeamAsync(userNickname, team);
        }
        
        public void SendUsersFromLobbyToGame(string gameId) {
            base.Channel.SendUsersFromLobbyToGame(gameId);
        }
        
        public System.Threading.Tasks.Task SendUsersFromLobbyToGameAsync(string gameId) {
            return base.Channel.SendUsersFromLobbyToGameAsync(gameId);
        }
        
        public void KickUserFromLobby(string userNickname) {
            base.Channel.KickUserFromLobby(userNickname);
        }
        
        public System.Threading.Tasks.Task KickUserFromLobbyAsync(string userNickname) {
            return base.Channel.KickUserFromLobbyAsync(userNickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManager.IFriendManager", CallbackContract=typeof(Astralis.UserManager.IFriendManagerCallback))]
    public interface IFriendManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManager/SubscribeToFriendManager")]
        void SubscribeToFriendManager(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManager/SubscribeToFriendManager")]
        System.Threading.Tasks.Task SubscribeToFriendManagerAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManager/UnsubscribeToFriendManager")]
        void UnsubscribeToFriendManager(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManager/UnsubscribeToFriendManager")]
        System.Threading.Tasks.Task UnsubscribeToFriendManagerAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/SendFriendRequest", ReplyAction="http://tempuri.org/IFriendManager/SendFriendRequestResponse")]
        int SendFriendRequest(string nickname, string nicknameFriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/SendFriendRequest", ReplyAction="http://tempuri.org/IFriendManager/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<int> SendFriendRequestAsync(string nickname, string nicknameFriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ReplyFriendRequest", ReplyAction="http://tempuri.org/IFriendManager/ReplyFriendRequestResponse")]
        int ReplyFriendRequest(string nickname, string nicknameRequest, bool answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ReplyFriendRequest", ReplyAction="http://tempuri.org/IFriendManager/ReplyFriendRequestResponse")]
        System.Threading.Tasks.Task<int> ReplyFriendRequestAsync(string nickname, string nicknameRequest, bool answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/RemoveFriend", ReplyAction="http://tempuri.org/IFriendManager/RemoveFriendResponse")]
        int RemoveFriend(string nickname, string nicknamefriendToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/RemoveFriend", ReplyAction="http://tempuri.org/IFriendManager/RemoveFriendResponse")]
        System.Threading.Tasks.Task<int> RemoveFriendAsync(string nickname, string nicknamefriendToRemove);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ShowUserSubscribedToFriendManager", ReplyAction="http://tempuri.org/IFriendManager/ShowUserSubscribedToFriendManagerResponse")]
        void ShowUserSubscribedToFriendManager(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ShowUserUnsubscribedToFriendManager", ReplyAction="http://tempuri.org/IFriendManager/ShowUserUnsubscribedToFriendManagerResponse")]
        void ShowUserUnsubscribedToFriendManager(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ShowFriends", ReplyAction="http://tempuri.org/IFriendManager/ShowFriendsResponse")]
        void ShowFriends(System.Collections.Generic.Dictionary<string, System.Tuple<bool, int>> onlineFriends);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ShowFriendRequest", ReplyAction="http://tempuri.org/IFriendManager/ShowFriendRequestResponse")]
        void ShowFriendRequest(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ShowFriendAccepted", ReplyAction="http://tempuri.org/IFriendManager/ShowFriendAcceptedResponse")]
        void ShowFriendAccepted(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManager/ShowFriendDeleted", ReplyAction="http://tempuri.org/IFriendManager/ShowFriendDeletedResponse")]
        void ShowFriendDeleted(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendManagerChannel : Astralis.UserManager.IFriendManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendManagerClient : System.ServiceModel.DuplexClientBase<Astralis.UserManager.IFriendManager>, Astralis.UserManager.IFriendManager {
        
        public FriendManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToFriendManager(string nickname) {
            base.Channel.SubscribeToFriendManager(nickname);
        }
        
        public System.Threading.Tasks.Task SubscribeToFriendManagerAsync(string nickname) {
            return base.Channel.SubscribeToFriendManagerAsync(nickname);
        }
        
        public void UnsubscribeToFriendManager(string nickname) {
            base.Channel.UnsubscribeToFriendManager(nickname);
        }
        
        public System.Threading.Tasks.Task UnsubscribeToFriendManagerAsync(string nickname) {
            return base.Channel.UnsubscribeToFriendManagerAsync(nickname);
        }
        
        public int SendFriendRequest(string nickname, string nicknameFriend) {
            return base.Channel.SendFriendRequest(nickname, nicknameFriend);
        }
        
        public System.Threading.Tasks.Task<int> SendFriendRequestAsync(string nickname, string nicknameFriend) {
            return base.Channel.SendFriendRequestAsync(nickname, nicknameFriend);
        }
        
        public int ReplyFriendRequest(string nickname, string nicknameRequest, bool answer) {
            return base.Channel.ReplyFriendRequest(nickname, nicknameRequest, answer);
        }
        
        public System.Threading.Tasks.Task<int> ReplyFriendRequestAsync(string nickname, string nicknameRequest, bool answer) {
            return base.Channel.ReplyFriendRequestAsync(nickname, nicknameRequest, answer);
        }
        
        public int RemoveFriend(string nickname, string nicknamefriendToRemove) {
            return base.Channel.RemoveFriend(nickname, nicknamefriendToRemove);
        }
        
        public System.Threading.Tasks.Task<int> RemoveFriendAsync(string nickname, string nicknamefriendToRemove) {
            return base.Channel.RemoveFriendAsync(nickname, nicknamefriendToRemove);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManager.IGameManager", CallbackContract=typeof(Astralis.UserManager.IGameManagerCallback))]
    public interface IGameManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ConnectGame")]
        void ConnectGame(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ConnectGame")]
        System.Threading.Tasks.Task ConnectGameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/DispenseGameCards", ReplyAction="http://tempuri.org/IGameManager/DispenseGameCardsResponse")]
        int[] DispenseGameCards(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/DispenseGameCards", ReplyAction="http://tempuri.org/IGameManager/DispenseGameCardsResponse")]
        System.Threading.Tasks.Task<int[]> DispenseGameCardsAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/DrawGameCard")]
        void DrawGameCard(string nickname, int[] cardId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/DrawGameCard")]
        System.Threading.Tasks.Task DrawGameCardAsync(string nickname, int[] cardId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/EndGame")]
        void EndGame(int winnerTeam, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/EndGame")]
        System.Threading.Tasks.Task EndGameAsync(int winnerTeam, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/EndGameTurn")]
        void EndGameTurn(string nickname, System.Collections.Generic.Dictionary<int, int> boardAfterTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/EndGameTurn")]
        System.Threading.Tasks.Task EndGameTurnAsync(string nickname, System.Collections.Generic.Dictionary<int, int> boardAfterTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/StartFirstGamePhase")]
        void StartFirstGamePhase(string hostNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/StartFirstGamePhase")]
        System.Threading.Tasks.Task StartFirstGamePhaseAsync(string hostNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendMessageToGame")]
        void SendMessageToGame(string message, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendMessageToGame")]
        System.Threading.Tasks.Task SendMessageToGameAsync(string message, string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ShowUserConnectedGame", ReplyAction="http://tempuri.org/IGameManager/ShowUserConnectedGameResponse")]
        void ShowUserConnectedGame(string nickname, int team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ShowUsersInGame", ReplyAction="http://tempuri.org/IGameManager/ShowUsersInGameResponse")]
        void ShowUsersInGame(System.Collections.Generic.Dictionary<string, int> users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ShowCardDrawedInGame", ReplyAction="http://tempuri.org/IGameManager/ShowCardDrawedInGameResponse")]
        void ShowCardDrawedInGame(string nickname, int[] cardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ShowGamePlayerEndedTurn", ReplyAction="http://tempuri.org/IGameManager/ShowGamePlayerEndedTurnResponse")]
        void ShowGamePlayerEndedTurn(string nickname, System.Collections.Generic.Dictionary<int, int> boardAfterTurn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/StartFirstGamePhaseClient", ReplyAction="http://tempuri.org/IGameManager/StartFirstGamePhaseClientResponse")]
        void StartFirstGamePhaseClient(System.Tuple<string, string> firstPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/EndGameClient", ReplyAction="http://tempuri.org/IGameManager/EndGameClientResponse")]
        void EndGameClient(int winnerTeam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RecieveGameMessage", ReplyAction="http://tempuri.org/IGameManager/RecieveGameMessageResponse")]
        void RecieveGameMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerChannel : Astralis.UserManager.IGameManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerClient : System.ServiceModel.DuplexClientBase<Astralis.UserManager.IGameManager>, Astralis.UserManager.IGameManager {
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectGame(string nickname) {
            base.Channel.ConnectGame(nickname);
        }
        
        public System.Threading.Tasks.Task ConnectGameAsync(string nickname) {
            return base.Channel.ConnectGameAsync(nickname);
        }
        
        public int[] DispenseGameCards(string nickname) {
            return base.Channel.DispenseGameCards(nickname);
        }
        
        public System.Threading.Tasks.Task<int[]> DispenseGameCardsAsync(string nickname) {
            return base.Channel.DispenseGameCardsAsync(nickname);
        }
        
        public void DrawGameCard(string nickname, int[] cardId) {
            base.Channel.DrawGameCard(nickname, cardId);
        }
        
        public System.Threading.Tasks.Task DrawGameCardAsync(string nickname, int[] cardId) {
            return base.Channel.DrawGameCardAsync(nickname, cardId);
        }
        
        public void EndGame(int winnerTeam, string nickname) {
            base.Channel.EndGame(winnerTeam, nickname);
        }
        
        public System.Threading.Tasks.Task EndGameAsync(int winnerTeam, string nickname) {
            return base.Channel.EndGameAsync(winnerTeam, nickname);
        }
        
        public void EndGameTurn(string nickname, System.Collections.Generic.Dictionary<int, int> boardAfterTurn) {
            base.Channel.EndGameTurn(nickname, boardAfterTurn);
        }
        
        public System.Threading.Tasks.Task EndGameTurnAsync(string nickname, System.Collections.Generic.Dictionary<int, int> boardAfterTurn) {
            return base.Channel.EndGameTurnAsync(nickname, boardAfterTurn);
        }
        
        public void StartFirstGamePhase(string hostNickname) {
            base.Channel.StartFirstGamePhase(hostNickname);
        }
        
        public System.Threading.Tasks.Task StartFirstGamePhaseAsync(string hostNickname) {
            return base.Channel.StartFirstGamePhaseAsync(hostNickname);
        }
        
        public void SendMessageToGame(string message, string nickname) {
            base.Channel.SendMessageToGame(message, nickname);
        }
        
        public System.Threading.Tasks.Task SendMessageToGameAsync(string message, string nickname) {
            return base.Channel.SendMessageToGameAsync(message, nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManager.IEndGame", CallbackContract=typeof(Astralis.UserManager.IEndGameCallback))]
    public interface IEndGame {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEndGame/GetEndGameUsers")]
        void GetEndGameUsers(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEndGame/GetEndGameUsers")]
        System.Threading.Tasks.Task GetEndGameUsersAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEndGame/GameEnded")]
        void GameEnded(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEndGame/GameEnded")]
        System.Threading.Tasks.Task GameEndedAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEndGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndGame/ShowEndGameUsers", ReplyAction="http://tempuri.org/IEndGame/ShowEndGameUsersResponse")]
        void ShowEndGameUsers(Astralis.UserManager.UserWithTeam[] usersWithTeams);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEndGameChannel : Astralis.UserManager.IEndGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EndGameClient : System.ServiceModel.DuplexClientBase<Astralis.UserManager.IEndGame>, Astralis.UserManager.IEndGame {
        
        public EndGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public EndGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public EndGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EndGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EndGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetEndGameUsers(string nickname) {
            base.Channel.GetEndGameUsers(nickname);
        }
        
        public System.Threading.Tasks.Task GetEndGameUsersAsync(string nickname) {
            return base.Channel.GetEndGameUsersAsync(nickname);
        }
        
        public void GameEnded(string nickname) {
            base.Channel.GameEnded(nickname);
        }
        
        public System.Threading.Tasks.Task GameEndedAsync(string nickname) {
            return base.Channel.GameEndedAsync(nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManager.ILeaderboardManager")]
    public interface ILeaderboardManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderboardManager/GetLeaderboardInfo", ReplyAction="http://tempuri.org/ILeaderboardManager/GetLeaderboardInfoResponse")]
        Astralis.UserManager.GamesWonInfo[] GetLeaderboardInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderboardManager/GetLeaderboardInfo", ReplyAction="http://tempuri.org/ILeaderboardManager/GetLeaderboardInfoResponse")]
        System.Threading.Tasks.Task<Astralis.UserManager.GamesWonInfo[]> GetLeaderboardInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILeaderboardManagerChannel : Astralis.UserManager.ILeaderboardManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LeaderboardManagerClient : System.ServiceModel.ClientBase<Astralis.UserManager.ILeaderboardManager>, Astralis.UserManager.ILeaderboardManager {
        
        public LeaderboardManagerClient() {
        }
        
        public LeaderboardManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LeaderboardManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeaderboardManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeaderboardManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Astralis.UserManager.GamesWonInfo[] GetLeaderboardInfo() {
            return base.Channel.GetLeaderboardInfo();
        }
        
        public System.Threading.Tasks.Task<Astralis.UserManager.GamesWonInfo[]> GetLeaderboardInfoAsync() {
            return base.Channel.GetLeaderboardInfoAsync();
        }
    }
}
